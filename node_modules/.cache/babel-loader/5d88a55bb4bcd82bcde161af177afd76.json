{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Baptiste\\\\Desktop\\\\demo-indexed-db-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Baptiste\\\\Desktop\\\\demo-indexed-db-master\\\\src\\\\app\\\\Messages.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Card, ResourceList, TextStyle, Avatar, FilterType } from '@shopify/polaris';\nimport { openDB } from 'idb';\nexport default function Messages(props) {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        data = _useState2[0],\n        setData = _useState2[1];\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        selectedItems = _useState4[0],\n        setSelectedItems = _useState4[1];\n\n  const _useState5 = useState('DATE_MODIFIED_DESC'),\n        _useState6 = _slicedToArray(_useState5, 2),\n        sortValue = _useState6[0],\n        setSortValue = _useState6[1];\n\n  const _useState7 = useState(''),\n        _useState8 = _slicedToArray(_useState7, 2),\n        searchValue = _useState8[0],\n        setSearchValue = _useState8[1];\n\n  const _useState9 = useState([{\n    key: 'accountStatusFilter',\n    value: 'Account enabled'\n  }]),\n        _useState10 = _slicedToArray(_useState9, 2),\n        appliedFilters = _useState10[0],\n        setAppliedFilters = _useState10[1];\n\n  async function handleSearchChange(searchValue) {\n    console.log('search changed', searchValue);\n    setSearchValue(searchValue);\n    const db = await openDB('offline_db', 1);\n    const store = db.transaction(['customers'], 'readwrite').objectStore('customers');\n    const customer = await store.index('by_name').get(searchValue);\n\n    if (customer) {\n      setData([customer]);\n    }\n  }\n\n  function handleFiltersChange(appliedFilters) {\n    setAppliedFilters(appliedFilters);\n  }\n\n  function handleSortChange(sortValue) {\n    setSortValue(sortValue);\n  }\n\n  function handleSelectionChange(items) {\n    setSelectedItems(items);\n  }\n\n  function handlePutCustomers() {\n    selectedItems.forEach(id => {\n      async function putCustomer() {\n        const db = await openDB('offline_db', 1);\n        const store = db.transaction(['customers'], 'readwrite').objectStore('customers');\n        await store.put(id);\n        console.log('customer change', id);\n      }\n\n      putCustomer();\n    });\n  }\n\n  function handleDeleteCustomers() {\n    selectedItems.forEach(id => {\n      async function deleteCustomer() {\n        const db = await openDB('offline_db', 1);\n        const store = db.transaction(['customers'], 'readwrite').objectStore('customers');\n        await store.delete(id);\n        console.log('customer deleted', id);\n      }\n\n      deleteCustomer();\n    });\n  }\n\n  const resourceName = {\n    singular: 'customer',\n    plural: 'customers'\n  };\n  const promotedBulkActions = [{\n    content: 'Edit customers',\n    onAction: () => console.log('Todo: implement bulk edit')\n  }];\n  const bulkActions = [{\n    content: 'Add tags',\n    onAction: () => console.log('Todo: implement bulk add tags')\n  }, {\n    content: 'Remove tags',\n    onAction: () => console.log('Todo: implement bulk remove tags')\n  }, {\n    content: 'Delete customers',\n    onAction: () => handleDeleteCustomers()\n  }, {\n    content: 'Put customers',\n    onAction: () => handlePutCustomers()\n  }];\n  const filters = [{\n    key: 'orderCountFilter',\n    label: 'Number of orders',\n    operatorText: 'is greater than',\n    type: FilterType.TextField\n  }, {\n    key: 'accountStatusFilter',\n    label: 'Account status',\n    operatorText: 'is',\n    type: FilterType.Select,\n    options: ['Enabled', 'Invited', 'Not invited', 'Declined']\n  }];\n  const filterControl = React.createElement(ResourceList.FilterControl, {\n    filters: filters,\n    appliedFilters: appliedFilters,\n    onFiltersChange: handleFiltersChange,\n    searchValue: searchValue,\n    onSearchChange: handleSearchChange,\n    additionalAction: {\n      content: 'Save',\n      onAction: () => console.log('New filter saved')\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  });\n\n  function renderItem(item) {\n    const id = item.id,\n          url = item.url,\n          name = item.name,\n          location = item.location,\n          latestOrderUrl = item.latestOrderUrl;\n    const media = React.createElement(Avatar, {\n      customer: true,\n      size: \"medium\",\n      name: name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    });\n    const shortcutActions = latestOrderUrl ? [{\n      content: 'Voir les dernière commandes',\n      url: latestOrderUrl\n    }] : null;\n    return React.createElement(ResourceList.Item, {\n      id: id,\n      url: url,\n      media: media,\n      accessibilityLabel: 'Voir les détailles pour :  ' + name,\n      shortcutActions: shortcutActions,\n      persistActions: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(TextStyle, {\n      variation: \"strong\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, name)), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, location));\n  }\n\n  useEffect(() => {\n    if (searchValue !== '') {\n      return;\n    }\n\n    let customers = [];\n\n    async function loadCustomers() {\n      const db = await openDB('offline_db', 1);\n      const store = db.transaction('customers').objectStore('customers');\n      const results = await store.getAll();\n      let cursor = await store.openCursor(); // can be replaced by an async iterator\n\n      while (cursor) {\n        customers = [...customers, cursor.value];\n        cursor = await cursor.continue();\n      }\n\n      setData(customers);\n    }\n\n    loadCustomers();\n  });\n  return React.createElement(Card, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  }, React.createElement(ResourceList, {\n    resourceName: resourceName,\n    items: data,\n    renderItem: renderItem,\n    selectedItems: selectedItems,\n    onSelectionChange: handleSelectionChange,\n    promotedBulkActions: promotedBulkActions,\n    bulkActions: bulkActions,\n    sortValue: sortValue,\n    sortOptions: [{\n      label: 'Newest update',\n      value: 'DATE_MODIFIED_DESC'\n    }, {\n      label: 'Oldest update',\n      value: 'DATE_MODIFIED_ASC'\n    }],\n    onSortChange: selected => {\n      setSortValue(selected);\n      console.log(\"Sort option changed to \".concat(selected, \".\"));\n    },\n    filterControl: filterControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["C:\\Users\\Baptiste\\Desktop\\demo-indexed-db-master\\src\\app\\Messages.js"],"names":["React","useState","useEffect","Card","ResourceList","TextStyle","Avatar","FilterType","openDB","Messages","props","data","setData","selectedItems","setSelectedItems","sortValue","setSortValue","searchValue","setSearchValue","key","value","appliedFilters","setAppliedFilters","handleSearchChange","console","log","db","store","transaction","objectStore","customer","index","get","handleFiltersChange","handleSortChange","handleSelectionChange","items","handlePutCustomers","forEach","id","putCustomer","put","handleDeleteCustomers","deleteCustomer","delete","resourceName","singular","plural","promotedBulkActions","content","onAction","bulkActions","filters","label","operatorText","type","TextField","Select","options","filterControl","renderItem","item","url","name","location","latestOrderUrl","media","shortcutActions","customers","loadCustomers","results","getAll","cursor","openCursor","continue","selected"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport {Card, ResourceList, TextStyle, Avatar, FilterType} from '@shopify/polaris';\nimport {openDB} from 'idb';\n\nexport default function Messages(props) {\n  const [data, setData] = useState([]);\n  const [selectedItems, setSelectedItems] = useState([]);\n  const [sortValue, setSortValue] = useState('DATE_MODIFIED_DESC');\n  const [searchValue, setSearchValue] = useState('');\n  const [appliedFilters, setAppliedFilters] = useState([\n    {\n      key: 'accountStatusFilter',\n      value: 'Account enabled',\n    },\n  ]);\n\n  async function handleSearchChange(searchValue) {\n    console.log('search changed', searchValue);\n    setSearchValue(searchValue);\n\n\n    const db = await openDB('offline_db',1);\n    const store = db.transaction(['customers'], 'readwrite').objectStore('customers');\n    const customer = await store.index('by_name').get(searchValue);\n    if(customer){\n      setData([customer]);\n    }\n  }\n\n  function handleFiltersChange(appliedFilters) {\n    setAppliedFilters(appliedFilters);\n  }\n\n  function handleSortChange(sortValue) {\n    setSortValue(sortValue);\n  }\n\n  function handleSelectionChange(items) {\n    setSelectedItems(items);\n  }\n\n  function handlePutCustomers() {\n    selectedItems.forEach(id => {\n      async function putCustomer() {\n        const db = await openDB('offline_db',1);\n        const store = db.transaction(['customers'], 'readwrite').objectStore('customers');\n        await store.put(id);\n        console.log('customer change', id);\n      }\n\n      putCustomer();\n    });\n  }\n\n  function handleDeleteCustomers() {\n    selectedItems.forEach(id => {\n      async function deleteCustomer() {\n        const db = await openDB('offline_db',1);\n        const store = db.transaction(['customers'], 'readwrite').objectStore('customers');\n        await store.delete(id);\n        console.log('customer deleted', id);\n      }\n\n      deleteCustomer();\n    });\n  }\n\n  const resourceName = {\n    singular: 'customer',\n    plural: 'customers',\n  };\n\n  const promotedBulkActions = [\n    {\n      content: 'Edit customers',\n      onAction: () => console.log('Todo: implement bulk edit'),\n    },\n  ];\n  const bulkActions = [\n    {\n      content: 'Add tags',\n      onAction: () => console.log('Todo: implement bulk add tags'),\n    },\n    {\n      content: 'Remove tags',\n      onAction: () => console.log('Todo: implement bulk remove tags'),\n    },\n    {\n      content: 'Delete customers',\n      onAction: () => handleDeleteCustomers(),\n    },\n    {\n      content: 'Put customers',\n      onAction: () => handlePutCustomers(),\n    },\n  ];\n  const filters = [\n    {\n      key: 'orderCountFilter',\n      label: 'Number of orders',\n      operatorText: 'is greater than',\n      type: FilterType.TextField,\n    },\n    {\n      key: 'accountStatusFilter',\n      label: 'Account status',\n      operatorText: 'is',\n      type: FilterType.Select,\n      options: ['Enabled', 'Invited', 'Not invited', 'Declined'],\n    },\n  ];\n\n  const filterControl = (\n    <ResourceList.FilterControl\n      filters={filters}\n      appliedFilters={appliedFilters}\n      onFiltersChange={handleFiltersChange}\n      searchValue={searchValue}\n      onSearchChange={handleSearchChange}\n      additionalAction={{\n        content: 'Save',\n        onAction: () => console.log('New filter saved'),\n      }}\n    />\n  );\n\n  function renderItem(item) {\n\n    const {id, url, name, location, latestOrderUrl} = item;\n    const media = <Avatar customer size=\"medium\" name={name}/>;\n    const shortcutActions = latestOrderUrl\n      ? [{content: 'Voir les dernière commandes', url: latestOrderUrl}]\n      : null;\n    return (\n      <ResourceList.Item\n        id={id}\n        url={url}\n        media={media}\n        accessibilityLabel={'Voir les détailles pour :  ' + name}\n        shortcutActions={shortcutActions}\n        persistActions\n      >\n        <h3>\n          <TextStyle variation=\"strong\">{name}</TextStyle>\n        </h3>\n        <div>{location}</div>\n      </ResourceList.Item>\n    );\n\n  }\n\n  useEffect(() => {\n    if(searchValue !== '') {\n      return;\n    }\n    let customers = [];\n\n    async function loadCustomers() {\n      const db = await openDB('offline_db', 1);\n      const store = db.transaction('customers').objectStore('customers');\n      const results = await store.getAll();\n      let cursor = await store.openCursor();\n\n      // can be replaced by an async iterator\n      while (cursor){\n        customers = [...customers, cursor.value];\n        cursor = await cursor.continue();\n      }\n\n      setData(customers);\n\n    }\n\n    loadCustomers();\n  });\n\n  return (\n    <Card>\n      <ResourceList\n        resourceName={resourceName}\n        items={data}\n        renderItem={renderItem}\n        selectedItems={selectedItems}\n        onSelectionChange={handleSelectionChange}\n        promotedBulkActions={promotedBulkActions}\n        bulkActions={bulkActions}\n        sortValue={sortValue}\n        sortOptions={[\n          {label: 'Newest update', value: 'DATE_MODIFIED_DESC'},\n          {label: 'Oldest update', value: 'DATE_MODIFIED_ASC'},\n        ]}\n        onSortChange={(selected) => {\n          setSortValue(selected);\n          console.log(`Sort option changed to ${selected}.`);\n        }}\n        filterControl={filterControl}\n      />\n    </Card>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}